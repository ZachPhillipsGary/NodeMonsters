// game.js
// ========
"use strict";
module.exports = {
  map: function(size) {
   this.size = size || 70;
   //define tile class
   function tile(properties) {
     //constructor
       if (properties.hasOwnProperty("x") && properties.hasOwnProperty("y")) {
           if(properties.x >= 0 && properties.y >= 0) {
             this.x = properties.x || 0;
             this.y = properties.y || 0;
           }
       }
     if (properties.hasOwnProperty("color")) {
         this.color = properties.color || "#ffffff";
     }
     if (properties.hasOwnProperty("kind")) {
       this.kind = null;
       switch (properties.Type) {
         case "floor":
         //floor
           this.kind = 0;
           break;
         default:
         //wall
         this.kind = 1;

       }
     }
     //Construct the list of items and players on the tile
     if (properties.hasOwnProperty("objects")) {
       this.objects =  new Array();
       if (Array.isArray(properties.objects)) {
           for (var i = 0; i < properties.objects.length; i++) {
             this.objects.push(properties.objects[i]);
           }
       }
     }
   }
   tile.prototype.getTile = function () {
      return {
           
            "color": this.color
      }
   };
   //create map
  this.mapArray = new Array();
  //create list of player locations
  this.playerArray = new Array();
   for (var i = 0; i < size; i++) {
     this.mapArray[i] =  new Array();
     for (var l = 0; l < size; l++) {
       var tileType = 0;
       var colorVal = "#ffffff";
       if ((i === 0) || (l === 0) || (i === this.size-1) || (l === this.size-1) ) {
        this.mapArray[i][l] = new tile({
         "x": i,
         "y": l,
         "color": "#000000",
         "objects": {},
         "kind": 1
       });
       } else {
             this.mapArray[i][l] = new tile({
         "x": i,
         "y": l,
         "color": colorVal,
         "objects": {},
         "kind": 0
       });
       }
     }
   }
 }
};
module.exports.map.prototype.getTile = function (x,y) {
  if ((x <= 0) || (y <= 0) || (y > this.size-1) || (x > this.size-1) ) {
         return new tile({
         "x": NaN,
         "y": NaN,
         "color": "#000000",
         "objects": {},
         "kind": 1
       });  
  } else {
      return this.mapArray[x][y];
  }
};
module.exports.map.prototype.setTile = function (x,y,element) {
 this.mapArray[x][y] = element;
};
module.exports.map.prototype.updatePlayer = function (player) {
    function getRandomColor() {
     var letters = '0123456789ABCDEF'.split('');
     var color = '#';
     for (var i = 0; i < 6; i++ ) {
         color += letters[Math.floor(Math.random() * 16)];
     }
     return color;
   }
   this.playerArray.push()

};
module.exports.map.prototype.printMap = function() {
var mapVals = new Array();
  for (var i = 0; i < this.mapArray.length; i++) {
    mapVals[i] = [];
      for (var l = 0; l < this.mapArray[i].length; l++) {
    
            mapVals[i][l] = this.mapArray[i][l].getTile();
        
      }
  }
  return mapVals;
};
